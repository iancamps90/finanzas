#!/usr/bin/env node

/**
 * üöÄ Script de Despliegue a Producci√≥n
 * Finance Dash Pro - Migraci√≥n autom√°tica a PostgreSQL
 */

const { PrismaClient } = require('@prisma/client');
const { execSync } = require('child_process');

const prisma = new PrismaClient();

async function main() {
  console.log('üöÄ Iniciando despliegue a producci√≥n...');
  console.log('=====================================');

  try {
    // Paso 1: Verificar conexi√≥n a la base de datos
    console.log('üìä Verificando conexi√≥n a la base de datos...');
    await prisma.$connect();
    console.log('‚úÖ Conexi√≥n exitosa a PostgreSQL');

    // Paso 2: Ejecutar migraciones
    console.log('üîÑ Ejecutando migraciones...');
    try {
      execSync('npx prisma db push', { stdio: 'inherit' });
      console.log('‚úÖ Migraciones completadas');
    } catch (error) {
      console.log('‚ö†Ô∏è Error en migraciones, intentando con reset...');
      execSync('npx prisma migrate reset --force', { stdio: 'inherit' });
      console.log('‚úÖ Base de datos reseteada y migrada');
    }

    // Paso 3: Generar cliente Prisma
    console.log('üîß Generando cliente Prisma...');
    execSync('npx prisma generate', { stdio: 'inherit' });
    console.log('‚úÖ Cliente Prisma generado');

    // Paso 4: Verificar si necesitamos seed
    const userCount = await prisma.user.count();
    console.log(`üë• Usuarios en la base de datos: ${userCount}`);

    if (userCount === 0 && process.env.DEMO_SEED === 'true') {
      console.log('üå± Ejecutando seed con datos demo...');
      execSync('npx prisma db seed', { stdio: 'inherit' });
      console.log('‚úÖ Seed completado');
    }

    // Paso 5: Verificar tablas principales
    console.log('üìã Verificando estructura de la base de datos...');
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `;
    
    console.log(`‚úÖ Tablas creadas: ${tables.length}`);
    console.log('üìä Tablas:', tables.map(t => t.table_name).join(', '));

    // Paso 6: Estad√≠sticas b√°sicas
    const stats = {
      users: await prisma.user.count(),
      categories: await prisma.category.count(),
      transactions: await prisma.transaction.count(),
      companies: await prisma.company.count(),
    };

    console.log('\nüìà Estad√≠sticas de la base de datos:');
    console.log(`üë• Usuarios: ${stats.users}`);
    console.log(`üìÅ Categor√≠as: ${stats.categories}`);
    console.log(`üí∞ Transacciones: ${stats.transactions}`);
    console.log(`üè¢ Empresas: ${stats.companies}`);

    console.log('\nüéâ ¬°Despliegue completado exitosamente!');
    console.log('=====================================');
    console.log('üîó URLs importantes:');
    console.log('üìä Dashboard: https://finanzas.iancamps.dev/dashboard');
    console.log('üîê Login: https://finanzas.iancamps.dev/login');
    console.log('üìà Power BI: https://finanzas.iancamps.dev/powerbi');
    console.log('üìä API Demo: https://finanzas.iancamps.dev/api/bi/public');
    
    if (stats.users > 0) {
      console.log('\nüë§ Usuarios de prueba:');
      console.log('üìß demo@example.com / demo123');
      console.log('üìß admin@example.com / admin123');
    }

  } catch (error) {
    console.error('‚ùå Error durante el despliegue:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar solo si es llamado directamente
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  });
}

module.exports = main;
